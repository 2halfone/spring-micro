version: '3.8'

services:
  # PostgreSQL Database - INTERNAL ONLY
  postgres:
    image: postgres:15-alpine
    container_name: springmon-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-springmon}
      POSTGRES_USER: ${POSTGRES_USER:-springmon_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-springmon_secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - springmon-internal
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-springmon_user}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Auth Service - INTERNAL ONLY (Port 8082)
  auth-service:
    build: ./auth-service
    container_name: springmon-auth
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/${POSTGRES_DB:-springmon}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER:-springmon_user}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD:-springmon_secure_password}
      - JWT_SECRET=${JWT_SECRET:-springmon_jwt_secret_key_2024_very_secure_random_string}
      - SERVER_PORT=8082
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - springmon-internal
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # User Service - INTERNAL ONLY (Port 8083)  
  user-service:
    build: ./user-service
    container_name: springmon-user
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/${POSTGRES_DB:-springmon}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER:-springmon_user}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD:-springmon_secure_password}
      - JWT_SECRET=${JWT_SECRET:-springmon_jwt_secret_key_2024_very_secure_random_string}
      - SERVER_PORT=8083
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - springmon-internal
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Gateway Service - ONLY EXTERNAL ACCESS (Port 8080)
  gateway-service:
    build: ./gateway-service
    container_name: springmon-gateway
    ports:
      - "8080:8080"  # ONLY PORT EXPOSED EXTERNALLY
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - AUTH_SERVICE_URL=http://auth-service:8082
      - USER_SERVICE_URL=http://user-service:8083
      - JWT_SECRET=${JWT_SECRET:-springmon_jwt_secret_key_2024_very_secure_random_string}
      - SERVER_PORT=8080
    depends_on:
      auth-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
    networks:
      - springmon-internal
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# NETWORK INTERNO - COMUNICAZIONE SICURA TRA SERVIZI
networks:
  springmon-internal:
    driver: bridge
    internal: false  # Permette accesso internet per download dipendenze
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# VOLUMI PERSISTENTI
volumes:
  postgres_data:
    driver: local
