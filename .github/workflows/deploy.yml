name: Deploy SpringMon to VM

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build Gateway Service
      run: |
        echo "Building Gateway Service..."
        cd gateway-service
        mvn clean package -DskipTests
        
    - name: Build Auth Service
      run: |
        echo "Building Auth Service..."
        cd auth-service
        mvn clean package -DskipTests
        
    - name: Build User Service
      run: |
        echo "Building User Service..."
        cd user-service
        mvn clean package -DskipTests
        
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
        
    - name: Test SSH connection
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "echo 'SSH connection successful'"
        
    - name: Deploy to VM
      run: |
        # Create deployment directory on VM
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "mkdir -p ~/springmon-deployment"
        
        # Copy files to VM
        scp -r ./* ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:~/springmon-deployment/
        
        # Execute deployment script on VM
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
          cd ~/springmon-deployment
          
          # Stop existing containers
          docker-compose down || true
          
          # Remove old containers and images
          docker container prune -f
          docker image prune -f
          
          # Build and start services
          docker-compose up -d --build
          
          # Wait for services to start
          sleep 30
          
          # Check service status
          docker-compose ps
          
          # Show logs for debugging
          docker-compose logs --tail=50
        EOF
        
    - name: Verify deployment
      run: |
        echo "Deployment completed! Services should be available at:"
        echo "Gateway: http://${{ secrets.DEPLOY_HOST }}:8080"
        echo "Auth Service: http://${{ secrets.DEPLOY_HOST }}:8081"
        echo "User Service: http://${{ secrets.DEPLOY_HOST }}:8082"
        
        # Test if gateway is responding
        sleep 10
        curl -f http://${{ secrets.DEPLOY_HOST }}:8080/actuator/health || echo "Gateway health check failed"
