name: Deploy SpringMon Production

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build Gateway Service
      run: |
        echo "Building Gateway Service..."
        cd gateway-service
        mvn clean package -DskipTests
        
    - name: Build Auth Service
      run: |
        echo "Building Auth Service..."
        cd auth-service
        mvn clean package -DskipTests
        
    - name: Build User Service
      run: |
        echo "Building User Service..."
        cd user-service
        mvn clean package -DskipTests
        
    - name: Verify JAR files
      run: |
        echo "Verifying compiled JAR files..."
        ls -la auth-service/target/*.jar
        ls -la gateway-service/target/*.jar
        ls -la user-service/target/*.jar
        
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to VM spring-micro directory
      run: |
        echo "Deploying to ~/spring-micro directory on VM..."
        
        # Ensure spring-micro directory exists and sync all files
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "mkdir -p ~/spring-micro"
        
        # Sync all project files including compiled JARs
        rsync -avz --delete ./ ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:~/spring-micro/
        
        echo "Files synchronized to VM"
        
    - name: Execute deployment on VM
      run: |
        ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
          echo "Starting deployment in ~/spring-micro..."
          cd ~/spring-micro
          
          echo "Verifying JAR files on VM:"
          ls -la auth-service/target/*.jar || echo "Auth JAR not found"
          ls -la gateway-service/target/*.jar || echo "Gateway JAR not found"
          ls -la user-service/target/*.jar || echo "User JAR not found"
          
          echo "Stopping existing containers..."
          docker-compose down || true
          
          echo "Cleaning up old containers and images..."
          docker container prune -f
          docker image prune -f
          
          echo "Building and starting services..."
          docker-compose up -d --build
          
          echo "Waiting for services to start..."
          sleep 45
          
          echo "Checking service status:"
          docker-compose ps
          
          echo "Service logs (last 20 lines):"
          docker-compose logs --tail=20
        EOF
        
    - name: Verify deployment health
      run: |
        echo "Deployment completed! Testing services..."
        echo "Gateway: http://${{ secrets.DEPLOY_HOST }}:8080"
        
        # Wait for services to be fully ready
        sleep 15
        
        # Test gateway health endpoint
        echo "Testing Gateway health..."
        curl -f http://${{ secrets.DEPLOY_HOST }}:8080/api/health || echo "Gateway health check failed"
        
        echo "ðŸŽ‰ Deployment complete!"
